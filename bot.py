import os
import asyncio
import pandas as pd
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from crud import add_site, get_average_prices
from parser import run_parsing

load_dotenv()
TOKEN = os.getenv("TOKEN")
DOWNLOADS_DIR = os.getenv("DOWNLOADS_DIR", "downloads")
os.makedirs(DOWNLOADS_DIR, exist_ok=True)

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")],
        [KeyboardButton(text="–°–ø–∞—Ä—Å–∏—Ç—å")]
    ],
    resize_keyboard=True
)

@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ Excel-—Ñ–∞–π–ª —Å —Å–∞–π—Ç–∞–º–∏.", reply_markup=keyboard
    )

@dp.message(lambda message: message.document)
async def handle_document(message: types.Message):
    document = message.document
    file_path = os.path.join(DOWNLOADS_DIR, document.file_name)
    await bot.download(document, destination=file_path)
    df = pd.read_excel(file_path)
    await message.answer(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n{df.head().to_string()}")
    for _, row in df.iterrows():
        add_site(row["title"], row["url"], row["xpath"])
    await message.answer("–°–∞–π—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")

@dp.message(lambda message: message.text == "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞")
async def send_average_prices(message: types.Message):
    results = get_average_prices()
    text = "\n".join(
        [f"{title}: {avg_price:.2f} —Ä—É–±." for title, avg_price in results]
    )
    await message.answer(text or "–¶–µ–Ω—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

@dp.message(lambda message: message.text == "–°–ø–∞—Ä—Å–∏—Ç—å")
async def parse_and_send(message: types.Message):
    await message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥...")
    run_parsing()
    results = get_average_prices()
    if not results:
        await message.answer("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return
    text = "–°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã:\n" + "\n".join(
        [f"{title}: {avg_price:.2f} ‚ÇΩ" for title, avg_price in results]
    )
    await message.answer(text)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
